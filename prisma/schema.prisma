generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  firstName            String
  lastName             String
  phone                String        @unique
  password             String
  role                 Role          @default(USER)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  locations            Location[]
  appointments         Appointment[]
  reviews              Review[]
  employee             Employee?
  isVerified           Boolean       @default(false)
  verificationToken    String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  refreshToken         String?       @unique // Optional field for storing hashed refresh token
  refreshTokenExpires  DateTime? // Expiration date for refresh token

  @@index([email])
  @@index([phone])
}

model Location {
  id          String        @id @default(cuid())
  latitude    Float
  longitude   Float
  address     String
  city        String
  state       String
  country     String
  zip         String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Appointment Appointment[]

  @@index([city])
  @@index([zip])
}

model Employee {
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @id
  services   Service[]
  workDays   Json // e.g., {"sunday": true, "monday": true, "tuesday": true, "wednesday": true, "thursday": true, "friday": false, "saturday": false}
  startHour  Int // e.g., 9 for 9 AM 
  endHour    Int // e.g., 21 for 9 PM or 14 for 2 PM
  bufferTime Int // in minutes, to account for travel and preparation time between appointments
}

model Service {
  id           String        @id @default(cuid())
  name         String
  description  String
  price        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  employees    Employee[]
  appointments Appointment[]

  @@index([name])
}

model Appointment {
  id         String    @id @default(cuid())
  date       DateTime
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  services   Service[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  review     Review[]
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  @@index([rating])
}

enum Role {
  USER
  EMPLOYEE
  ADMIN
}
